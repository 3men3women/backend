# Generated by Django 5.0.6 on 2025-10-01 16:50

from django.db import migrations
from django.contrib.auth.models import User

# 점수 매핑을 여기에 직접 정의합니다.
EMOTION_SCORES = {
    'sad': 0, 'tired': 1, 'anxious': 2, 'angry': 3,
    'neutral': 4, 'calm': 5, 'excited': 6, 'happy': 7,
}

def create_dummy_data(apps, schema_editor):
    EmotionRecord = apps.get_model('emodia', 'EmotionRecord')
    User = apps.get_model('auth', 'User')
    
    user, created = User.objects.get_or_create(
        username='yoonseoah', 
        defaults={'first_name': '서아', 'last_name': '윤'}
    )

    # 더미 데이터 목록
    dummy_data = [
        {'record_date': '2025-09-01 08:15:32', 'emotion': 'happy'},
        {'record_date': '2025-09-02 22:45:11', 'emotion': 'tired'},
        {'record_date': '2025-09-03 14:22:54', 'emotion': 'neutral'},
        {'record_date': '2025-09-04 19:58:01', 'emotion': 'excited'},
        {'record_date': '2025-09-05 23:11:43', 'emotion': 'sad'},
        {'record_date': '2025-09-06 11:03:19', 'emotion': 'calm'},
        {'record_date': '2025-09-07 18:30:05', 'emotion': 'neutral'},
        {'record_date': '2025-09-08 09:05:27', 'emotion': 'anxious'},
        {'record_date': '2025-09-09 21:50:33', 'emotion': 'angry'},
        {'record_date': '2025-09-10 13:14:08', 'emotion': 'tired'},
        {'record_date': '2025-09-11 20:01:59', 'emotion': 'happy'},
        {'record_date': '2025-09-12 07:55:12', 'emotion': 'neutral'},
        {'record_date': '2025-09-13 16:42:38', 'emotion': 'excited'},
        {'record_date': '2025-09-14 22:10:00', 'emotion': 'calm'},
        {'record_date': '2025-09-15 12:00:00', 'emotion': 'tired'},
        {'record_date': '2025-09-16 19:21:51', 'emotion': 'neutral'},
        {'record_date': '2025-09-17 23:59:59', 'emotion': 'sad'},
        {'record_date': '2025-09-18 09:33:47', 'emotion': 'happy'},
        {'record_date': '2025-09-19 17:48:21', 'emotion': 'angry'},
        {'record_date': '2025-09-20 20:30:10', 'emotion': 'calm'},
        {'record_date': '2025-09-21 10:18:36', 'emotion': 'neutral'},
        {'record_date': '2025-09-22 22:54:02', 'emotion': 'tired'},
        {'record_date': '2025-09-23 15:09:14', 'emotion': 'anxious'},
        {'record_date': '2025-09-24 18:00:29', 'emotion': 'excited'},
        {'record_date': '2025-09-25 21:12:45', 'emotion': 'neutral'},
        {'record_date': '2025-09-26 11:46:50', 'emotion': 'happy'},
        {'record_date': '2025-09-27 19:37:18', 'emotion': 'tired'},
        {'record_date': '2025-09-28 08:50:55', 'emotion': 'calm'},
        {'record_date': '2025-09-29 23:01:04', 'emotion': 'sad'},
        {'record_date': '2025-09-30 20:49:23', 'emotion': 'neutral'},
    ]

    # 기존에 잘못 들어간 데이터를 삭제합니다.
    EmotionRecord.objects.filter(user=user).delete()
    
    # 수정된 데이터 생성
    records_to_create = []
    for data in dummy_data:
        records_to_create.append(
            EmotionRecord(
                user=user,
                date=data['record_date'].split(' ')[0],
                emotion=data['emotion'],
                emotion_score=EMOTION_SCORES.get(data['emotion'], 0) # 점수를 직접 계산
            )
        )
    EmotionRecord.objects.bulk_create(records_to_create)


def reverse_dummy_data(apps, schema_editor):
    # 마이그레이션을 되돌릴 때 데이터를 삭제하는 함수
    EmotionRecord = apps.get_model('emodia', 'EmotionRecord')
    User = apps.get_model('auth', 'User')
    user = User.objects.filter(username='yoonseoah').first()
    if user:
        EmotionRecord.objects.filter(user=user).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('emodia', '0003_emotionrecord_emotion_score_and_more'),
    ]

    operations = [
        migrations.RunPython(create_dummy_data, reverse_code=reverse_dummy_data),
    ]